import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.Command;
import org.openqa.selenium.remote.CommandExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.HttpCommandExecutor;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.Response;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.remote.http.W3CHttpCommandCodec;
import org.openqa.selenium.remote.http.W3CHttpResponseCodec;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class WhenIWorkAdvanceWeek extends Thread {

	static RemoteWebDriver driver;
	static RemoteWebDriver wd;
	static SessionId session_id;
	static URL url;
	static String dayToChange = "Mon";
	static int cHour = 3;
	static int cMin = 18;
	static int cSec = 00;
	static Robot robot;

	public static void main(String[] args) {
		initialize();
		zoom();
		wd.findElement(By.xpath("//button[@class='btn btn-secondary navigate-previous btn-panel btn-md']")).click();
//		advance();
	}

	public static void zoom() {
		// Takes control and does not give it back
//		try {
//			robot = new Robot();
//			robot.keyPress(KeyEvent.VK_CONTROL);
//			robot.keyPress(KeyEvent.VK_SUBTRACT);
//			robot.keyRelease(KeyEvent.VK_SUBTRACT);
//			robot.keyPress(KeyEvent.VK_SUBTRACT);
//			robot.keyRelease(KeyEvent.VK_SUBTRACT);
//			robot.keyRelease(KeyEvent.VK_CONTROL);
//		} catch (AWTException e) {
//			e.printStackTrace();
//		}
//
//		wd = createDriverFromSession(session_id, url);
		
		// Should work but does not
//		WebElement body = wd.findElement(By.tagName("body"));
//		body.sendKeys(Keys.chord(Keys.CONTROL, Keys.ADD));

		// Does not work
//		WebElement html = wd.findElement(By.tagName("html"));
//		new Actions(wd).sendKeys(html, Keys.CONTROL, Keys.ADD, Keys.NULL).perform();

		// Works but changes control and does not give it back and does not work as
		// expected
//		JavascriptExecutor executor = (JavascriptExecutor)wd;
//		executor.executeScript("document.body.style.zoom = '80%'");

	}

	public static void initialize() {

		String path = "libs/chromedriver.exe";
		System.setProperty("webdriver.chrome.driver", path);

		ChromeOptions options = new ChromeOptions();
		options.addArguments("disable-infobars");

		driver = new ChromeDriver(options);
		
		HttpCommandExecutor executor = (HttpCommandExecutor) driver.getCommandExecutor();
		url = executor.getAddressOfRemoteServer();
		session_id = driver.getSessionId();
		driver.get("https://appx.wheniwork.com/scheduler");
		
		WebDriverWait wait = new WebDriverWait(driver, 20);
		driver.manage().window().maximize();
		driver.findElement(By.id("email")).sendKeys("PhoenixFireWolf@live.com");
		driver.findElement(By.id("password")).sendKeys("u#htJv$7!@a39h7");
		driver.findElement(By.xpath("//button[@class='btn btn-primary btn-login btn-md btn-block']")).click();
		wait.until(ExpectedConditions.presenceOfElementLocated(
				By.xpath("//button[@class='btn btn-secondary toggle-fullscreen btn-icn btn-panel btn-md']"))).click();
		driver.findElement(By.xpath("//div[@class='hide-sidebar hint--right']")).click();
	}

	public static boolean dayToChange() {
		Date now = new Date();
		SimpleDateFormat simpleDateformat = new SimpleDateFormat("E");
		return simpleDateformat.format(now).equals(dayToChange);
	}

	public static boolean timeToChange() {
		LocalDateTime now = LocalDateTime.now();
		int hour = now.getHour();
		int minute = now.getMinute();
		int second = now.getSecond();
		return hour == cHour && minute == cMin && second == cSec;
	}

	public static void advance() {
		while (true) {
			if (dayToChange() && timeToChange()) {
				wd.findElement(By.xpath("//button[@class='btn btn-secondary mr-2 navigate-today btn-panel btn-md']"))
						.click();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static RemoteWebDriver createDriverFromSession(final SessionId sessionId, URL command_executor){
		CommandExecutor executor = new HttpCommandExecutor(command_executor) {

			@Override
			public Response execute(Command command) throws IOException {
				Response response = null;
				if (command.getName() == "newSession") {
					response = new Response();
					response.setSessionId(sessionId.toString());
					response.setStatus(0);
					response.setValue(Collections.<String, String>emptyMap());

					try {
						Field commandCodec = null;
						commandCodec = this.getClass().getSuperclass().getDeclaredField("commandCodec");
						commandCodec.setAccessible(true);
						commandCodec.set(this, new W3CHttpCommandCodec());

						Field responseCodec = null;
						responseCodec = this.getClass().getSuperclass().getDeclaredField("responseCodec");
						responseCodec.setAccessible(true);
						responseCodec.set(this, new W3CHttpResponseCodec());
					} catch (NoSuchFieldException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}

				} else {
					response = super.execute(command);
				}
				return response;
			}
		};

    return new RemoteWebDriver(executor, new DesiredCapabilities());
	}
}